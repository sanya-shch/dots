{"version":3,"file":"static/js/470.fbca2360.chunk.js","mappings":"oLAsCA,MA5BA,SAAqB,GAAmD,IAAjDA,EAAQ,EAARA,SAAS,EAAD,EAAEC,UAAAA,OAAS,MAAG,uBAAsB,EACjE,GAA4CC,EAAAA,EAAAA,UAAS,MAAK,eAAnDC,EAAc,KAAEC,EAAiB,KAsBxC,OApBAC,EAAAA,EAAAA,kBAAgB,WACd,IAAIC,EAAUC,SAASC,eAAeP,GAClCQ,GAAgB,EASpB,OANKH,IACHG,GAAgB,EAChBH,EAjBN,SAAsCL,GACpC,IAAME,EAAiBI,SAASG,cAAc,OAG9C,OAFAP,EAAeQ,aAAa,KAAMV,GAClCM,SAASK,KAAKC,YAAYV,GACnBA,CACT,CAYgBW,CAA6Bb,IAEzCG,EAAkBE,GAEX,WAEDG,GAAiBH,EAAQS,YAC3BT,EAAQS,WAAWC,YAAYV,EAEnC,CACF,GAAG,CAACL,IAGmB,OAAnBE,EAAgC,MAE7Bc,EAAAA,EAAAA,cAAajB,EAAUG,EAChC,E,SCVA,EAtBc,SAAH,GAA2D,IAArDe,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAAU,EAAD,EAAEC,UAAAA,OAAS,OAAQ,EAC5D,OACE,iBAAKC,UAAU,kBAAiB,WAC9B,kBACEC,KAAK,OACLC,KAAK,OACLF,UAAU,WACVG,GAAG,MACHC,UAAQ,EACRC,aAAa,MACbP,UAAWA,EACXF,MAAOA,EACPC,SAAUA,EACVS,UAAWP,KAEb,kBAAOQ,QAAQ,MAAK,UAClB,0BAAM,0BAId,E,kBCdMC,EAAa,CAAC,QAAS,OAAQ,MAAO,UAkG5C,GAhGmBC,EAAAA,EAAAA,KAAS,YAAkC,IAA/BC,EAAM,EAANA,OAAQC,EAAW,EAAXA,YAAaR,EAAE,EAAFA,GAC5CS,GAAkBC,EAAAA,EAAAA,UACtB,kBAAMC,EAAAA,EAAAA,YAAAA,KAA0B,SAACC,GAAI,OAAKA,EAAKC,KAAK,GAAC,GACrD,CAACF,EAAAA,EAAAA,cAEGG,GAAqBJ,EAAAA,EAAAA,UACzB,kBAAML,EAAWU,QAAO,SAACH,GAAI,OAAMH,EAAgBO,SAASJ,EAAK,GAAC,GAClE,CAACH,IAGH,GAAwChC,EAAAA,EAAAA,UAASqC,EAAmB,IAAG,eAAhEG,EAAY,KAAEC,EAAe,KACpC,GAAgCzC,EAAAA,EAAAA,UAAS,IAAG,eAArC0C,EAAQ,KAAEC,EAAW,KA+C5B,OAAKb,GAGH,SAAC,EAAW,CAAC/B,UAAU,2BAA0B,UAC/C,gBAAKqB,UAAU,cAAa,UAC1B,iBAAKA,UAAU,gBAAe,WAC5B,gBAAKA,UAAU,mBAAkB,UAC/B,SAAC,EAAK,CACJF,UAAW,GACXF,MAAO0B,EACPzB,SAxBS,SAAC2B,GACpBD,EAAYC,EAAMC,OAAO7B,MAC3B,EAuBYG,WAAS,OAGb,gBAAKC,UAAU,gBAAe,UAC5B,gBAAKA,UAAU,eAAc,SAC1BiB,EAAmBS,KAAI,SAACX,GAAI,OAC3B,gBAEEf,UAAS,UAAKe,EAAI,YAChBA,IAASK,EAAe,UAAY,IAEtCO,QAAS,kBAAMN,EAAgBN,EAAK,GAAC,gBAJvBA,GAKd,SAIR,gBAAKf,UAAU,YAAW,UACxB,mBAAQA,UAAU,cAAc2B,QAzEtB,WACdP,GAAgBE,KAClBM,EAAAA,EAAAA,IAAUzB,EAAI,CACZmB,SAAAA,EACAN,MAAOI,EACPS,IAAKf,EAAAA,EAAAA,OASPH,IAeJ,EA4C+D,SAAC,kBA5B5C,IAoCtB,G","sources":["components/ReactPortal/index.js","components/Input/index.js","modules/StartModal/index.js"],"sourcesContent":["import { useState, useLayoutEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nfunction createWrapperAndAppendToBody(wrapperId) {\r\n  const wrapperElement = document.createElement(\"div\");\r\n  wrapperElement.setAttribute(\"id\", wrapperId);\r\n  document.body.appendChild(wrapperElement);\r\n  return wrapperElement;\r\n}\r\n\r\nfunction ReactPortal({ children, wrapperId = \"react-portal-wrapper\" }) {\r\n  const [wrapperElement, setWrapperElement] = useState(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let element = document.getElementById(wrapperId);\r\n    let systemCreated = false;\r\n    // if element is not found with wrapperId or wrapperId is not provided,\r\n    // create and append to body\r\n    if (!element) {\r\n      systemCreated = true;\r\n      element = createWrapperAndAppendToBody(wrapperId);\r\n    }\r\n    setWrapperElement(element);\r\n\r\n    return () => {\r\n      // delete the programatically created element\r\n      if (systemCreated && element.parentNode) {\r\n        element.parentNode.removeChild(element);\r\n      }\r\n    };\r\n  }, [wrapperId]);\r\n\r\n  // wrapperElement state will be null on very first render.\r\n  if (wrapperElement === null) return null;\r\n\r\n  return createPortal(children, wrapperElement);\r\n}\r\n\r\nexport default ReactPortal;\r\n","import React from \"react\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst Input = ({ value, onChange, maxLength, autofocus = false }) => {\r\n  return (\r\n    <div className=\"input_container\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        className=\"question\"\r\n        id=\"nme\"\r\n        required\r\n        autoComplete=\"off\"\r\n        maxLength={maxLength}\r\n        value={value}\r\n        onChange={onChange}\r\n        autoFocus={autofocus}\r\n      />\r\n      <label htmlFor=\"nme\">\r\n        <span>What's your name?</span>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { useState, useMemo } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport \"./style.scss\";\r\n\r\nimport ReactPortal from \"../../components/ReactPortal\";\r\nimport Input from \"../../components/Input\";\r\nimport gameStore from \"../../store/gameStore\";\r\nimport { addPlayer } from \"../../firebase/gameRooms\";\r\n\r\nconst colorsList = [\"green\", \"blue\", \"red\", \"yellow\"];\r\n\r\nconst StartModal = observer(({ isOpen, handleClose, id }) => {\r\n  const usersColorsList = useMemo(\r\n    () => gameStore.playersList.map((item) => item.color),\r\n    [gameStore.playersList]\r\n  );\r\n  const filteredColorsList = useMemo(\r\n    () => colorsList.filter((item) => !usersColorsList.includes(item)),\r\n    [usersColorsList]\r\n  );\r\n\r\n  const [checkedColor, setCheckedColor] = useState(filteredColorsList[0]);\r\n  const [username, setUsername] = useState(\"\");\r\n\r\n  const handleClick = () => {\r\n    if (checkedColor && username) {\r\n      addPlayer(id, {\r\n        username,\r\n        color: checkedColor,\r\n        uid: gameStore.uuid,\r\n      });\r\n\r\n      // if (ongoingGame) {\r\n      //   // updateDoc(doc(db, \"game_rooms_poker\", id), {\r\n      //   //   midgame_player_uid: arrayUnion(uuid),\r\n      //   // });\r\n      // }\r\n\r\n      handleClose();\r\n    } else {\r\n      if (!username) {\r\n        // setToast({\r\n        //   type: \"danger\",\r\n        //   text: \"Enter your username\",\r\n        // });\r\n      }\r\n      if (!checkedColor) {\r\n        // setToast({\r\n        //   type: \"danger\",\r\n        //   text: \"Select the icon\",\r\n        // });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  // React.useEffect(() => {\r\n  //   if (isOpen) {\r\n  //     document.body.style.overflow = \"hidden\";\r\n  //   }\r\n  //\r\n  //   return () => {\r\n  //     document.body.style.overflow = \"auto\";\r\n  //   };\r\n  // }, [isOpen]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <ReactPortal wrapperId=\"react-portal-start-modal\">\r\n      <div className=\"start-modal\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"input_name_block\">\r\n            <Input\r\n              maxLength={12}\r\n              value={username}\r\n              onChange={handleChange}\r\n              autofocus\r\n            />\r\n          </div>\r\n          <div className=\"content_block\">\r\n            <div className=\"colors_block\">\r\n              {filteredColorsList.map((item) => (\r\n                <div\r\n                  key={`color-${item}`}\r\n                  className={`${item} ${\r\n                    item === checkedColor ? \"checked\" : \"\"\r\n                  }`}\r\n                  onClick={() => setCheckedColor(item)}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"btn_block\">\r\n            <button className=\"main_button\" onClick={handleClick}>\r\n              Join\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ReactPortal>\r\n  );\r\n});\r\n\r\nexport default StartModal;\r\n"],"names":["children","wrapperId","useState","wrapperElement","setWrapperElement","useLayoutEffect","element","document","getElementById","systemCreated","createElement","setAttribute","body","appendChild","createWrapperAndAppendToBody","parentNode","removeChild","createPortal","value","onChange","maxLength","autofocus","className","type","name","id","required","autoComplete","autoFocus","htmlFor","colorsList","observer","isOpen","handleClose","usersColorsList","useMemo","gameStore","item","color","filteredColorsList","filter","includes","checkedColor","setCheckedColor","username","setUsername","event","target","map","onClick","addPlayer","uid"],"sourceRoot":""}